
import logging
import pandas as pd
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

API_TOKEN = '7606185382:AAEvBBq3oBgCw3cbbOxEWs74DK1IiCwfCKg'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

EXCEL_PATH = "catalog.xlsx"
category_data = {}

def load_catalog():
    global category_data
    if not os.path.exists(EXCEL_PATH):
        category_data = {}
        return
    df = pd.read_excel(EXCEL_PATH)
    df = df[df['–¶–µ–Ω–∞'].notna() & df['–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä—É–ø–ø'].notna()]
    df = df[['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä—É–ø–ø', '–¶–µ–Ω–∞', '–ï–¥.–∏–∑–º.']]
    grouped = df.groupby('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä—É–ø–ø').apply(
        lambda g: g[['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–ï–¥.–∏–∑–º.']].values.tolist()).to_dict()
    category_data = {}
    for category, items in grouped.items():
        text = f"*{category}*\n"
        for name, price, unit in items:
            suffix = f" –∑–∞ {unit}" if pd.notna(unit) else ""
            text += f"- {name} ‚Äî {int(price)}‚ÇΩ{suffix}\n"
        category_data[category] = text

load_catalog()

def get_category_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    row = []
    for i, category in enumerate(category_data.keys(), 1):
        row.append(KeyboardButton(category))
        if i % 2 == 0:
            kb.add(*row)
            row = []
    if row:
        kb.add(*row)
    kb.add(KeyboardButton("üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"), KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"))
    return kb

async def check_subscription(user_id):
    try:
        chat_member = await bot.get_chat_member(chat_id='@krabamoreblg', user_id=user_id)
        return chat_member.status in ['member', 'creator', 'administrator']
    except:
        return False

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        await message.answer(
            "‚ùó –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @krabamoreblg"
        )
        return

    if not category_data:
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await message.answer("üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=get_category_keyboard())

@dp.message_handler(commands=['–æ–±–Ω–æ–≤–∏—Ç—å'])
async def update_cmd(message: types.Message):
    load_catalog()
    await message.answer("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_category_keyboard())

@dp.message_handler(lambda message: message.text == "üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def order_cmd(message: types.Message):
    await message.answer(
        "üì¶ *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:*\n"
        "üí¨ Telegram: @Krabamoreblg\n"
        "üì± WhatsApp: +7 963 814 36 34\n"
        "‚òé –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: +7 909 815 52 57",
        parse_mode="Markdown"
    )

@dp.message_handler(lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts_cmd(message: types.Message):
    await message.answer(
        "üìç –ê–¥—Ä–µ—Å: –≥. –ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫, —É–ª. –ö–∞–ª–∏–Ω–∏–Ω–∞ 1\n"
        "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 963 814 36 34\n"
        "üîó Telegram: @Krabamoreblg"
    )

@dp.message_handler()
async def category_response(message: types.Message):
    cat = message.text.strip()
    if cat in category_data:
        await message.answer(category_data[cat], parse_mode="Markdown")
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
