
import logging
import os
import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.executor import start_webhook
from aiohttp import web

API_TOKEN = '7606185382:AAEvBBq3oBgCw3cbbOxEWs74DK1IiCwfCKg'

WEBHOOK_HOST = 'https://krabamorebot.onrender.com'
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = int(os.environ.get('PORT', 5000))

bot = Bot(token=API_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

EXCEL_PATH = "catalog.xlsx"
category_data = {}

def load_catalog():
    global category_data
    if not os.path.exists(EXCEL_PATH):
        category_data = {}
        return
    df = pd.read_excel(EXCEL_PATH)
    df = df[df['–¶–µ–Ω–∞'].notna() & df['–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä—É–ø–ø'].notna()]
    df = df[['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä—É–ø–ø', '–¶–µ–Ω–∞', '–ï–¥.–∏–∑–º.']]
    grouped = df.groupby('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä—É–ø–ø').apply(
        lambda g: g[['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–ï–¥.–∏–∑–º.']].values.tolist()).to_dict()
    category_data = {}
    for category, items in grouped.items():
        text = f"*{category}*\n"
        for name, price, unit in items:
            suffix = f" –∑–∞ {unit}" if pd.notna(unit) else ""
            text += f"- {name} ‚Äî {int(price)}‚ÇΩ{suffix}\n"
        category_data[category] = text

load_catalog()

main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥"))
main_menu.add(KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å –≤ WhatsApp"))
main_menu.add(KeyboardButton("üéÅ –ê–∫—Ü–∏–∏"))

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ ü¶Ä –ö—Ä–∞–±–∞ –ú–æ—Ä–µ!</b>\n"
        "–ß–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–µ–±—è –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?\n\n"
        "–°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ ‚Äî –∫—Ä–∞–±—ã, –∫—Ä–µ–≤–µ—Ç–∫–∏, —Ä–∞–∫–∏, –≥—Ä–µ–±–µ—à–∫–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ —É–∂–µ –∂–¥—É—Ç –≤–∞—Å!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é:",
        reply_markup=main_menu
    )

@dp.message_handler(lambda message: message.text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥")
async def catalog_handler(message: types.Message):
    if not category_data:
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        return
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    row = []
    for i, category in enumerate(category_data.keys(), 1):
        row.append(KeyboardButton(category))
        if i % 2 == 0:
            keyboard.add(*row)
            row = []
    if row:
        keyboard.add(*row)
    keyboard.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    await message.answer("üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts_cmd(message: types.Message):
    await message.answer(
        "üìç –ê–¥—Ä–µ—Å: –≥. –ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫, —É–ª. –ö–∞–ª–∏–Ω–∏–Ω–∞ 1\n"
        "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 963 814 36 34\n"
        "üîó Telegram: @Krabamoreblg"
    )

@dp.message_handler(lambda message: message.text == "üõí –ó–∞–∫–∞–∑–∞—Ç—å –≤ WhatsApp")
async def whatsapp_cmd(message: types.Message):
    button = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å WhatsApp", url="https://wa.me/message/J4K3D275FBZZF1")
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ WhatsApp üëá", reply_markup=button)

@dp.message_handler(lambda message: message.text == "üéÅ –ê–∫—Ü–∏–∏")
async def promo_cmd(message: types.Message):
    await message.answer(
        "üéÅ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏</b>\n"
        "–£—Å–ª–æ–≤–∏—è –∏ –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ü–∏–π —É—Ç–æ—á–Ω—è–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –Ω–∞—à–µ–º WhatsApp: <a href='https://wa.me/message/J4K3D275FBZZF1'>–Ω–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å</a>",
        parse_mode="HTML"
    )

@dp.message_handler(lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main(message: types.Message):
    await message.answer("‚¨Ö –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

@dp.message_handler()
async def category_response(message: types.Message):
    cat = message.text.strip()
    if cat in category_data:
        await message.answer(category_data[cat], parse_mode="Markdown")
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(dp):
    await bot.delete_webhook()

app = web.Application()
app.router.add_post(WEBHOOK_PATH, lambda request: dp.process_update(types.Update(**await request.json())))
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT
    )
