import logging
import os
import pandas as pd
from functools import wraps
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Text
from aiogram.utils.executor import start_webhook
from aiogram.utils.exceptions import ChatNotFound, BadRequest

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not API_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TELEGRAM_TOKEN")

WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "https://krabamorebot.onrender.com")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 5000))

CHANNEL_USERNAME = "krabamoreblg"
CHANNEL_LINK = f"https://t.me/{CHANNEL_USERNAME}"
CHANNEL_ID = f"@{CHANNEL_USERNAME}"

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger("krabamore")

bot = Bot(API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

EXCEL_PATH = "catalog.xlsx"
REQUIRED_COLUMNS = {"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–ï–¥.–∏–∑–º.", "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä—É–ø–ø"}

def load_catalog() -> dict:
    if not os.path.exists(EXCEL_PATH):
        log.warning("–ö–∞—Ç–∞–ª–æ–≥ %s –Ω–µ –Ω–∞–π–¥–µ–Ω", EXCEL_PATH)
        return {}
    try:
        df = pd.read_excel(EXCEL_PATH)
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: %s", e)
        return {}
    missing = REQUIRED_COLUMNS - set(df.columns)
    if missing:
        log.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: %s", ", ".join(missing))
        return {}
    df = df[df["–¶–µ–Ω–∞"].notna() & df["–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä—É–ø–ø"].notna()]
    catalog = {}
    for group, items in df.groupby("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä—É–ø–ø"):
        lines = []
        for _, row in items.iterrows():
            try:
                price = int(float(row["–¶–µ–Ω–∞"]))
            except Exception:
                continue
            lines.append(f"- {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']} ‚Äî {price}‚ÇΩ –∑–∞ {row['–ï–¥.–∏–∑–º.']}")
        if lines:
            catalog[group] = "\n".join(lines)
    log.info("–ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω. –ì—Ä—É–ø–ø: %d", len(catalog))
    return catalog

category_data = load_catalog()

main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add("üì¶ –ö–∞—Ç–∞–ª–æ–≥", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
main_menu.add("üõí –ó–∞–∫–∞–∑–∞—Ç—å –≤ WhatsApp", "üéÅ –ê–∫—Ü–∏–∏")

async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ("creator", "administrator", "member")
    except (ChatNotFound, BadRequest):
        log.warning("–ë–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç –∫–∞–Ω–∞–ª %s. –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", CHANNEL_ID)
        return False

def subscription_required():
    def decorator(handler):
        @wraps(handler)
        async def wrapper(message: types.Message, *args, **kwargs):
            if await is_subscribed(message.from_user.id):
                return await handler(message, *args, **kwargs)
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK))
            kb.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"))
            await message.answer(
                "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
                f"üëâ <a href='{CHANNEL_LINK}'>@{CHANNEL_USERNAME}</a>\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
                reply_markup=kb,
                disable_web_page_preview=True
            )
        return wrapper
    return decorator

@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def on_check_sub(call: types.CallbackQuery):
    if await is_subscribed(call.from_user.id):
        await call.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
        await call.message.answer("–û—Ç–ª–∏—á–Ω–æ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üëá", reply_markup=main_menu)
    else:
        await call.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.", show_alert=True)

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ü¶Ä –ö—Ä–∞–±–∞ –ú–æ—Ä–µ! –ß–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–µ–±—è –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?", reply_markup=main_menu)

@dp.message_handler(commands=["catalog"])
@subscription_required()
async def catalog_cmd(msg: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for cat in category_data.keys():
        keyboard.add(cat)
    keyboard.add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    await msg.answer("üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=keyboard)

@dp.message_handler(commands=["contacts"])
@subscription_required()
async def contacts_cmd(msg: types.Message):
    await msg.answer("üìç –≥. –ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫, —É–ª. –ö–∞–ª–∏–Ω–∏–Ω–∞ 1\nüì± +7 963 814 36 34\nüîó @Krabamoreblg")

@dp.message_handler(commands=["order"])
@subscription_required()
async def order_cmd(msg: types.Message):
    markup = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å WhatsApp", url="https://wa.me/message/J4K3D275FBZZF1")
    )
    await msg.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ WhatsApp üëá", reply_markup=markup)

@dp.message_handler(commands=["sales"])
@subscription_required()
async def sales_cmd(msg: types.Message):
    await msg.answer("üéÅ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ –≤ WhatsApp: https://wa.me/message/J4K3D275FBZZF1")

@dp.message_handler(Text(equals="üì¶ –ö–∞—Ç–∞–ª–æ–≥", ignore_case=True))
@subscription_required()
async def catalog_btn(msg: types.Message):
    await catalog_cmd(msg)

@dp.message_handler(Text(equals="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", ignore_case=True))
@subscription_required()
async def contacts_btn(msg: types.Message):
    await contacts_cmd(msg)

@dp.message_handler(Text(equals="üõí –ó–∞–∫–∞–∑–∞—Ç—å –≤ WhatsApp", ignore_case=True))
@subscription_required()
async def order_btn(msg: types.Message):
    await order_cmd(msg)

@dp.message_handler(Text(equals="üéÅ –ê–∫—Ü–∏–∏", ignore_case=True))
@subscription_required()
async def sales_btn(msg: types.Message):
    await sales_cmd(msg)

@dp.message_handler(Text(equals="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", ignore_case=True))
@subscription_required()
async def back_menu(msg: types.Message):
    await msg.answer("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

@dp.message_handler(lambda msg: msg.text in category_data)
@subscription_required()
async def category_items(msg: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    await msg.answer(category_data[msg.text], reply_markup=keyboard)

async def on_startup(dp):
    logging.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook: %s", WEBHOOK_URL)
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(dp):
    logging.info("–£–¥–∞–ª—è—é webhook")
    await bot.delete_webhook()

if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
